添加触发器
this.PlayBtnObj.GetComponent<EventTrigger>().triggers.RemoveAt(0);
EventTrigger.Entry entry = new EventTrigger.Entry();
entry.eventID = EventTriggerType.PointerClick;
entry.callback.AddListener(delegate(BaseEventData eventData)
{
    Menu.instance.PlayBtn();
});
this.PlayBtnObj.GetComponent<EventTrigger>().triggers.Add(entry);

//设置gameObject是否activite
base.gameObject.SetActive(isEnable);
//是否activite
gameObject.activeSelf

//遍历gameObject的transform的子transform，设置缩放大小
for (int i = 0; i < this.SettingsPanel.transform.childCount; i++)
{
	this.SettingsPanel.transform.GetChild(i).DOScale(Vector3.one, 0.15f).SetDelay((float)i * 0.08f).SetEase(Ease.Linear);
}
//遍历gameObject的transform的子transform，设置大小为0
for (int i = 0; i < this.SettingsPanel.transform.childCount; i++)
{
	this.SettingsPanel.transform.GetChild(i).transform.localScale = Vector3.zero;
}

//声明委托
public delegate int MyDelegate (string s);
//定义委托，这么写thisUpdate就是GetInput，不过为什么不直接用GetInput，委托的作用在哪？
莫非是不用回调时，可以将thisUpdate置空？还有可以作为参数传递？用来控制是否调用方法，直接update的话，可能一直监听输入，浪费资源
this.thisUpdate = new BallsManager.ThisUpdate(this.GetInput);

//判断是否有点击，并且点击在了GUI(菜单按钮等)上
Input.touchCount > 0 && EventSystem.current.IsPointerOverGameObject(Input.touches[0].fingerId)

//获取gameObject的组件
GetComponent<BallElement>();                                   //自定义的脚本
this.circleCol = base.GetComponent<SphereCollider>();          //碰撞器
this.trailRenderer = base.GetComponent<TrailRenderer>();       //
this.rigidBody2D = base.GetComponent<Rigidbody>();             //刚体

//销毁gameobject
UnityEngine.Object.Destroy(base.transform.gameObject);

//延时调用方法，表示0.1s后调用InitiateGame方法
base.Invoke("InitiateGame", 0.1f);

//实例化一个prefab，设置父位置，自己的位置
GameObject gameObject = UnityEngine.Object.Instantiate<GameObject>(this.dotPrefab);
gameObject.transform.parent = base.transform;
gameObject.transform.localPosition = new Vector3(0f, -50f, -10f);

//设置移动的动画
base.transform.DOLocalMove(new Vector3(0f, 0f, 11f), 30f, false).SetSpeedBased(true).SetEase(Ease.Linear);
//停止当前变化
base.transform.DOKill(false);

//检测碰撞，触发
OnCollisionEnter
OnCollisionExit
OnCollisionStay
OnTriggerEnter
OnTriggerExit
OnTriggerStay

//限制大小，如果输入大于最大数则返回最大数，小于最小数则返回最小数，否则返回自身
Mathf.Clamp()

//自定义mesh
this.meshFilter = base.GetComponent<MeshFilter>();
Mesh mesh = this.meshFilter.sharedMesh;
mesh.vertices = array;//顶点位置
mesh.normals = array2;//法向量，决定了每个顶点在光照下所呈现出的颜色
mesh.uv = array3;
mesh.triangles = array4;
mesh.RecalculateBounds();

Awake()
当一个脚本实例被载入时Awake被调用。
Awake用于在游戏开始之前初始化变量或游戏状态。在脚本整个生命周期内它仅被调用一次.Awake在所有对象被初始化之后调用，所以你可以安全的与其他对象对话或用诸如 GameObject.FindWithTag 这样的函数搜索它们。每个游戏物体上的Awke以随机的顺序被调用。因此，你应该用Awake来设置脚本间的引用，并用Start来传递信息。Awake总是在Start之前被调用。它不能用来执行协同程序。
Start()
Start仅在Update函数第一次被调用前调用。Start在behaviour的生命周期中只被调用一次。它和Awake的不同是Start只在脚本实例被启用时调用。
你可以按需调整延迟初始化代码。Awake总是在Start之前执行。这允许你协调初始化顺序。

通过键盘输入控制物体移动旋转
m_MovementInputValue = Input.GetAxis(m_MovementAxisName);
m_TurnInputValue = Input.GetAxis (m_TurnAxisName);
Vector3 movement = transform.forward * m_MovementInputValue * m_Speed * Time.deltaTime;
m_Rigidbody.MovePosition (m_Rigidbody.position + movement);
float turn = m_TurnInputValue * m_TurnSpeed * Time.deltaTime;
Quaternion turnRotation = Quaternion.Euler (0f,turn,0f);
m_Rigidbody.MoveRotation (m_Rigidbody.rotation * turnRotation);
