优点：
重用线程池中的线程，避免因为线程的创建和销毁所带来的性能开销；
有效控制线程池的最大并发数，避免大量线程因互相抢占系统资源而导致的阻塞现象；
对线程进行简单管理，并提供定时执行以及指定间隔循环执行等功能。

构造方法：
public ThreadPoolExecutor(
    int corePoolSize,                       //核心线程数，核心线程会在线程池中一直存活
    int maximumPoolSize,                    //所能容纳的最大线程数，当活动线程数达到该值后，后续的新任务将会被阻塞
    long keepAliveTime,                     //非核心线程闲置时的超时时长，超过时，非核心线程会被回收
    TimeUnit unit,                          //keepAliveTime的时间单位
    BlockingQueue<Runnable> workQueue,      //线程池中的任务队列
    ThreadFactory threadFactory             //线程工厂，为线程池提供创建新线程的功能
)

分类：
FixedThreadPool：通过Excutor的newFixedThreadPool方法创建。线程数量固定，当线程处于空闲状态时，不会被回收，除非线程池关闭了。
                 当所有线程都处于活动状态，新任务会处于等待状态，直到有线程空闲出来。
CacheThreadPool：通过Excutor的newCachedThreadPool方法创建。线程数量不定，只有非核心线程。当所有线程都处于活动状态，会创建新线程来处理新任务。
                 否则用空闲线程处理。空闲线程都有超时机制，超时60s，闲置线程会被回收。
ScheduledThreadPool：通过Excutor的newScheduledThreadPool方法创建。核心线程数固定，非核心线程数没限制。主要用于执行定时任务和具有固定周期的重复任务。
SingletThreadExecutor:通过Excutor的newSingleThreadPool方法创建。只有一个核心线程，它确保所有任务都在同一个线程中按顺序执行。
                 意义在于统一所有外界任务到一个线程中，使得这些任务之间不需要处理线程同步的问题。
                 
workQueue,threadFactory作用？
线程池源码，各个类型的线程池都是怎么创建的？
AysncTask用的是哪个线程池？
